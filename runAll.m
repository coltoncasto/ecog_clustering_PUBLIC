function runAll(varargin)
    % function to run multiple analyses
    
    % --- PARAMETERS FOR FUNCTIONS ---
    p = inputParser();
    addRequired(p,'saveName'); % directory name in output/ where files will be saved
    addParameter(p,'experiment','MITSWJNTask'); % 'MITSWJNTask' or 'MITLangloc' or 'both'
    addParameter(p,'useLangElecs',true);
    addParameter(p,'isPlotVisible',false);
    % formatting data (NON-FUNCTIONAL)
    addParameter(p,'doFormatData',false);
    addParameter(p,'doZScore',true);
    addParameter(p,'resampleRate',60);
    addParameter(p,'useWandJ',true); % MITSWJNTask only
    % clustering
    addParameter(p,'doClustering',false);
    addParameter(p,'doClusterMean',false);
    addParameter(p,'doClusterBarplot',false);
    addParameter(p,'doClusterValidation',false);
    addParameter(p,'doElbow',false);
    addParameter(p,'method','kmedoids')
    addParameter(p,'distance','correlation');
    addParameter(p,'template',[]);
    addParameter(p,'minK',3);
    addParameter(p,'maxK',3);
    addParameter(p,'cutoff',0.9);
    addParameter(p,'repeats',100);
    addParameter(p,'split',[]);
    addParameter(p,'repeatsVal',50);
    addParameter(p,'omitIterations',50);
    addParameter(p,'omitChannelsBy',5);
    addParameter(p,'scrambleTrials',false)
    addParameter(p,'colors',[]);
    addParameter(p,'filterByReliability',false);
    addParameter(p,'reliabThresh',0.1);
    % anatomical 
    addParameter(p,'doAnatomical',false);
    addParameter(p,'doGeneralAnatomical',false);
    addParameter(p,'angle',270);
    % dimensionality reduction
    addParameter(p,'doDimensionalityReduction',false);
    addParameter(p,'elecSize',20);
    addParameter(p,'shadeByReliability',false);
    addParameter(p,'k',3);
    parse(p, varargin{:});
    ops = p.Results;
    
    close all

    if ~iscell(ops.useLangElecs)
        ops.useLangElecs = {ops.useLangElecs};
    end

    % run for both lang elecs and non lang elecs
    for i=1:length(ops.useLangElecs)

        langElecs = ops.useLangElecs{i};

        % --- FORMAT DATA --- %
        if ops.doFormatData
            formatData(ops.saveName,...
                       'useLangElecs',langElecs,...
                       'experiment',ops.experiment,...
                       'doZScore',ops.doZScore,...
                       'resampleRate',ops.resampleRate,...
                       'useWandJ',ops.useWandJ,...
                       'split',ops.split);
        end


        % --- CLUSTER --- %
        if ops.doClustering
            clusterData(ops.saveName,...
                    'useLangElecs',langElecs,...
                    'experiment',ops.experiment,...
                    'doElbow',ops.doElbow,...
                    'useWandJ',ops.useWandJ,...
                    'template',ops.template,...
                    'distance',ops.distance,...
                    'method',ops.method,...
                    'minK',ops.minK,...
                    'maxK',ops.maxK,...
                    'cutoff',ops.cutoff,...
                    'repeats',ops.repeats,...
                    'srate',ops.resampleRate,...
                    'split',ops.split,...
                    'isPlotVisible',ops.isPlotVisible,...
                    'colors',ops.colors,...
                    'filterByReliability',ops.filterByReliability,...
                    'reliabThresh',ops.reliabThresh);
        end
        if ops.doClusterMean || (ops.doClustering && strcmp(ops.method,'kmedoids'))
            plotClusterMean(ops.saveName,...
                                'useLangElecs',langElecs,...
                                'experiment',ops.experiment,...
                                'useWandJ',ops.useWandJ,...
                                'minK',ops.minK,...
                                'maxK',ops.maxK,...
                                'srate',ops.resampleRate,...
                                'split',ops.split,...
                                'isPlotVisible',ops.isPlotVisible,...
                                'colors',ops.colors);
        end
        if ops.doClusterBarplot
            plotClusterBarplot(ops.saveName,...
                                'useLangElecs',langElecs,...
                                'experiment',ops.experiment,...
                                'useWandJ',ops.useWandJ,...
                                'minK',ops.minK,...
                                'maxK',ops.maxK,...
                                'isPlotVisible',ops.isPlotVisible,...
                                'colors',ops.colors);
        end

                
        % --- ANATOMICAL CLUSTERS --- %
        if ops.doAnatomical 
            for a=1:length(ops.angle)
                for k=ops.minK:ops.maxK
                    makeAllAnatomical(ops.saveName,...
                                'experiment',ops.experiment,...
                                'doLang',langElecs,...
                                'doCluster',k,...
                                'angle',ops.angle(a),...
                                'isPlotVisible',ops.isPlotVisible,...
                                'colors',ops.colors);
                end
            end
        end


        % --- DIMENSIONALITY REDUCTION --- %
        if ops.doDimensionalityReduction
            reduceDimensionality(ops.saveName,...
                                'saveName',ops.saveName,...
                                'useLangElecs',langElecs,...
                                'experiment',ops.experiment,...
                                'minK',ops.minK,...
                                'maxK',ops.maxK,...
                                'elecSize',ops.elecSize,...
                                'isPlotVisible',ops.isPlotVisible,...
                                'colors',ops.colors,...
                                'shadeByReliability',ops.shadeByReliability);
        end

    end


    % --- ALL SUBJECT GENERAL ANATOMICAL --- %
    if ops.doGeneralAnatomical
        for a=1:length(ops.angle)
            makeAllAnatomical(ops.saveName,...
                        'experiment',ops.experiment,...
                        'doBoth',true,...
                        'angle',ops.angle(a),... 
                        'isPlotVisible',ops.isPlotVisible);

            makeAllAnatomical(ops.saveName,...
                        'experiment',ops.experiment,....
                        'doLang',true,...
                        'angle',ops.angle(a),...
                        'isPlotVisible',ops.isPlotVisible);
        end
    end

end
    
